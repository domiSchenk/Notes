{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"# Welcome to Dendron\n\nThis is the root of your dendron vault. If you decide to publish your entire vault, this will be your landing page. You are free to customize any part of this page except the frontmatter on top.\n\n## Lookup\n\nThis section contains useful links to related resources.\n\n- [Getting Started Guide](https://link.dendron.so/6b25)\n- [Discord](https://link.dendron.so/6b23)\n- [Home Page](https://wiki.dendron.so/)\n- [Github](https://link.dendron.so/6b24)\n- [Developer Docs](https://docs.dendron.so/)\n","n":0.132}}},{"i":2,"$":{"0":{"v":"Git","n":1},"1":{"v":"\n#GIT    \n\n## [[Prune]]\n`git remote update origin --prune`\n","n":0.378}}},{"i":3,"$":{"0":{"v":"StencilJS","n":1},"1":{"v":"\n\n# StencilJS\n\n## forceUpdate\n```\n @Element() host!: HTMLElement;\n forceUpdate(this.host);\n```\nForces to run `render()`\n","n":0.316}}},{"i":4,"$":{"0":{"v":"NodeJS","n":1}}},{"i":5,"$":{"0":{"v":"NPM","n":1},"1":{"v":"\n## Add\n- `devDependencies` -> `--dev / -D`\n- `optionalDependencies` -> `--optional / -O`\n\n## Remove dublicate package entries:\n`npm dedupe`\n\n## Sorting package.json\n`npx sort-package-json` also removes dublicates, but does not take to highest version if there are differences.\n","n":0.171}}},{"i":6,"$":{"0":{"v":"UNABLE_TO_VERIFY_LEAF_SIGNATURE","n":1},"1":{"v":"\nTo disable this check you can run the following command:\n```\n    $ npm config set strict-ssl false\n```\n","n":0.25}}},{"i":7,"$":{"0":{"v":"Yarn","n":1},"1":{"v":"\n\n# Yarn\n\n## Interactive Upgrade\n`yarn upgrade-interactive`\n\n## Add\n- `devDependencies` -> `--dev / -D`\n- `peerDependencies` -> `--peer / -P`\n- `optionalDependencies` -> `--optional / -O`\n","n":0.218}}},{"i":8,"$":{"0":{"v":"PNPM","n":1},"1":{"v":"\n\n# PNPM\n\n## Fast CLI\n=> pnpx \n\n## Commands\n### Add\n| npm command     | pnpm equivalent  |\n| --------------- | ---------------- |\n| `npm install`   | `pnpm install`   |\n| `npm i <pkg>`   | `pnpm add <pkg>` |\n| `npm run <cmd>` | `pnpm <cmd>`     |\n\n\n| Command              | Meaning                        |     |\n| -------------------- | ------------------------------ | --- |\n| `pnpm add sax`       | Save to `dependencies`         |     |\n| `pnpm add -D sax`    | Save to `devDependencies`      |     |\n| `pnpm add -O sax`    | Save to `optionalDependencies` |     |\n| `pnpm add sax@next`  | Install from the `next` tag    |     |\n| `pnpm add sax@3.0.0` | Specify version `3.0.0`        |     |\n\n### Update\n  \n| Command               | Meaning                                                                  |\n| --------------------- | ------------------------------------------------------------------------ |\n| `pnpm up`             | Updates all dependencies, adhering to ranges specified in `package.json` |\n| `pnpm up --latest`    | Updates all dependencies, ignoring ranges specified in `package.json`    |\n| `pnpm up foo@2`       | Updates `foo` to the latest version on v2                                |\n| `pnpm up \"@babel/\\*\"` | Updates all dependencies under the `@babel` scope                        |\n\n#### Interactive\n`--interactive, -i`\n\n\n### Remove\nAliases: rm, uninstall, un\n\nRemoves packages from `node_modules` and from the project's `package.json`.\n\n\n#### Options\n\n##### --recursive, -r\nWhen used inside a workspace, removes a dependency (or dependencies) from every workspace package.\n\nWhen used not inside a workspace, removes a dependency (or dependencies) from\nevery package found in subdirectories.\n\n##### --global\nRemove a global package.\n\n##### --save-dev, -D\nOnly remove the dependency from `devDependencies`.\n\n##### --save-optional, -O\nOnly remove the dependency from `optionalDependencies`.\n\n##### --save-prod, -P\nOnly remove the dependency from `dependencies`.\n","n":0.066}}},{"i":9,"$":{"0":{"v":"Dotnet","n":1}}},{"i":10,"$":{"0":{"v":"Reinstall nugets","n":0.707},"1":{"v":"\n# Force Nuget to Reinstall Packages without Updating\n\nOccasionally I run into an issue where I’ll open a solution in Visual Studio, build it, and the build will fail because of dependent packages. I’ll try every way offered by Visual Studio to restore packages, but it will claim everything is up to date. Looking in Solution Explorer, you’ll see that some packages are clearly missing (icons on the packages showing they’re not there), but no amount of telling VS to restore packages (or building, which should do the restore as well) will get them.\n\nThe fix for this is to open Package Manager Console and run this command:\n\n```bash\nUpdate-Package -reinstall\n```\n\nNote: If you just run Update-Package, it will try to update all packages to the latest version, which isn’t necessarily what you want (especially if you’ve simply pulled from source control and want the project to just build with the versions of packages it has in source control).\n\nThat’s it – this does the trick for me. If you want to narrow it down to a certain project, just make sure you’ve selected the correct active project, or use this:\n\n```bash\nUpdate-Package -reinstall -Project ProjectName\n```\n\n\n## Source\nLink: https://ardalis.com/force-nuget-to-reinstall-packages-without-updating/","n":0.073}}},{"i":11,"$":{"0":{"v":"IIS Dotnet Core ASPNETCORE_ENVIRONMENT","n":0.5},"1":{"v":"\n# IIS Settings\n1. Open the \"Internet Information Services (IIS) Manager.\n2. Go to the Website where you want to set the environment variable.\n3. Find the \"Configuration Editor\".\n4. In the \"Section\" to the top left of the window, select `system.webServer/aspNetCore` in the dropdown and just to the right of this, REMEMBER to select `ApplicationHost.config`. If you forget, you will set this variable in the used `web.config` for the running site. Then of cause it will be overwritten when you deploy a new version of the website. The `ApplicationHost.config` sets it machine level, so the setting will live in a different place.\n5. Mark `environmentVariables` line and click the tree dots at the end to edit the list.\n6. Click the Add button and set the `name` to `ASPNETCORE_ENVIRONMENT` and `value` to `Development`\n\n\n->   Close the window and restart the website. The website should now have the ASPNETCORE_ENVIRONMENT variable set to `Development`\n","n":0.083}}},{"i":12,"$":{"0":{"v":"Docker","n":1}}},{"i":13,"$":{"0":{"v":"Volumes","n":1},"1":{"v":"\n\n# Docker Volumes\n## Create external volume\n\n```bash\ndocker volume create --driver local --opt type=none --opt device=/home/domischenk/share --opt o=bind <name>\n```\n","n":0.243}}},{"i":14,"$":{"0":{"v":"Chrome","n":1}}},{"i":15,"$":{"0":{"v":"Localhost Https","n":0.707},"1":{"v":"\n# HTTPS redirect in Chrome on Localhost\n- Go to **chrome://net-internals/#hsts**\n- Scroll to bottom\n- Enter localhost\n- Delete domain security policies\n![](assets/images/Chrome.localhost-https.md-2022-03-09-07-57-33.png)\n","n":0.229}}},{"i":16,"$":{"0":{"v":"Angular","n":1}}},{"i":17,"$":{"0":{"v":"Index html generation failed","n":0.5},"1":{"v":"\n# Index html generation failed\n\n## Property Missing ':'\n![](assets/images/index-html-gen-failed.png)\n\nIf this happens, somewhere in a CSS file, a non base64 svg is used!\nSomething like this:\n> background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='540' height='450' viewBox='0 0 1080 900'%3E%3Cg6...\");\n\n### Solution\nadd this to `angular.json`\n```json\n\"optimization\": {\n\t\"styles\": {\n\t\t\"inlineCritical\": false\n\t}\n }\n```\n\n1\n","n":0.18}}}]}
